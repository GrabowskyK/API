Course - http://localhost:5162/Course

1.Wszystkie kursy
URL: http://localhost:5162/Course/AllCourse
DATA:
[HttpGet]

2. Wszystkie kursy stworzonego przez danego nauczyciela:
URL: http://localhost:5162/Course/AllCourse/{userId}
DATA: W linku userId
[HttpGet]

3. Dany kurs
URL: http://localhost:5162/Course/{courseId}
DATA: W linku courseId
[HttpGet]

3.1 Dany kurs i zadania w nim (bez załącznika do pliku)
URL: http://localhost:5162/Course/Full/{courseId}
DATA: W linku courseId
[HttpGet]

4. Tworzenie kursu
URL: http://localhost:5162/Course/CreateCourse
DATA: {name, description} | wymaga tokenu w headers
[HttpPost]

5. Edycja kursu //zmień
URL: http://localhost:5162/Course/EditCourse/{courseId}
DATA: {name, description}*, w linku courseId | wymaga tokenu w headers
*Nie trzeba podawać obu wartości lecz można
[HttpPatch]

6. Usunięcie kursu //zmień
URL: http://localhost:5162/Course/DeleteCourse/{courseId}
DATA: w linku courseId | wymaga tokenu w headers
[HttpDelete]

=======================
=======================
=======================

Enrollment(zapisy) - http://localhost:5162/Enrollment

1. Lista userów w kursie 
URL: http://localhost:5162/Enrollment/InCourse/{courseId}
DATA: w linku courseId
[HttpGet]

2. Lista userów, którzy czekają na akceptacje admina (Nie widzi tych co on zaprosił)
URL: http://localhost:5162/Enrollment/NotInCourseYet/{courseId}
DATA: w linku courseId
[HttpGet]

3. Lista kursów do których został zaproszony zalogowany user 
URL: http://localhost:5162/Enrollment/InvitedCourse
DATA: potrzebny token w headers
[HttpGet]

4. Lista kursów w których jest user (musi być zalogowany)
URL: http://localhost:5162/Enrollment/MyCourses
DATA: potrzebny token w headers
[HttpGet]

5. Zapisanie się do kursu przez zalogowanego usera
URL: http://localhost:5162/Enrollment/JoinCourse/{courseId}
DATA: w linku courseId ,potrzebny token w headers
[HttpPost]

6. Akceptacja przez nauczyciela o dołączenie do kursu
URL: http://localhost:5162/Enrollment/AcceptJoin/{courseId}
DATA: {int[] usersId}, w linku courseId | potrzebny token w headers
INFO: 
<----------------------------------------------------------------------->
Nauczciel, który jest twórcą danego kursu jest w stanie zakceptować dołączenei userów do kursu.
Jak ja to widze? Jest lista uczniów i można zaznaczyć, że tego ucznia, tego i tego zaznacza. Klika na przycisk i oni się dodają do kursu. Czyli potrzeba przesłać tablice id tych userów. NIE WIEM CZY ZADZIAŁA, bo nie wiedziałem jak przesłać tablice do api jak testowałem w python. Finalnie się udało, ale musiałem zmienić jakieś rzeczy tu i tu.
<----------------------------------------------------------------------->
[HttpPatch]

7. Odrzucenie przez nauczyciela o dołączenie do kursu
URL: http://localhost:5162/Enrollment/AcceptJoin/{courseId}
DATA: {int[] usersId}, w linku courseId | potrzebny token w headers
INFO: 
<----------------------------------------------------------------------->
Nauczciel, który jest twórcą danego kursu jest w stanie odrzucić dołączenei userów do kursu.
Jak ja to widze? Jest lista uczniów i można zaznaczyć, że tego ucznia, tego i tego zaznacza. Klika na przycisk i oni się usuwają z kursu. Czyli potrzeba przesłać tablice id tych userów. NIE WIEM CZY ZADZIAŁA, bo nie wiedziałem jak przesłać tablice do api jak testowałem w python. Finalnie się udało, ale musiałem zmienić jakieś rzeczy tu i tu.
<----------------------------------------------------------------------->
[HttpPatch]

8. Zakceptowanie zaproszenia do kursu od nauczyciela przez usera
URL: http://localhost:5162/Enrollment/AcceptInvite/{courseId}
DATA: w linku courseId | potrzebny token w headers
INFO: Token usera, bo on musi zakceptować lub odrzucić
[HttpPatch]

9. Usunięcie zaproszenia do kursu od nauczyciela przez usera
URL: http://localhost:5162/Enrollment/DeleteInvite/{courseId}
DATA: w linku courseId | potrzebny token w headers
INFO: Token usera, bo on musi zakceptować lub odrzucić
[HttpDelete]

10. Usunięcie usera z kursu przez nauczyciela
URL: http://localhost:5162/Enrollment/RemoveUserFromCourse/{courseId}
DATA: {int[] usersId}, w linku courseId | potrzebny token w headers
INFO: Token nauczyciela, bo on musi usunąć. Tutaj tablica, bo a może będzie chciał usunąć więcej ludzi za jednym razem.
[HttpDelete]

11. Wypisanie się z kursu przez usera
URL: http://localhost:5162/Enrollment/SelfRemoveFromCourse/{courseId}
DATA:  w linku courseId | potrzebny token w headers
INFO: Token usera, bo on musi się sam usunąć
[HttpDelete]

=======================
=======================
=======================

Exercise - http://localhost:5162/Exercise

1. Wszystkie zadania w danym kursie
URL: http://localhost:5162/Exercise/{courseId}/AllExerciseInCourse
DATA:  w linku courseId
[HttpGet]

2. Konkretne info o danym kursie
URL: http://localhost:5162/Exercise/{exerciseId}
DATA:  w linku exerciseId
[HttpGet]

3. Zwraca plik do pobrania danego zadania
URL: http://localhost:5162/Exercise/{exerciseId}/File
DATA:  w linku exerciseId
[HttpGet]

4. Dodawanie zadania
URL: http://localhost:5162/Exercise/AddExercise
DATA:  {CourseId, ExerciseName, ExerciseDescription, Deadline} + File (IFormFile)  | headers token właściciela kursu
INFO: File jak i Description nie są wymagane (mogą być nullem).
Dodawanie zadania jest tylko dla twórcy danego kursu, więc jeszcze potrzebny jest headers i token
Tutaj podsyłam kod w python jak ja dodałem:
===
def AddExercise():
    token = 'eyJhbGciOiJodHRwOi8vd3d3LnczLm9yZy8yMDAxLzA0L3htbGRzaWctbW9yZSNobWFjLXNoYTI1NiIsInR5cCI6IkpXVCJ9.eyJodHRwOi8vc2NoZW1hcy54bWxzb2FwLm9yZy93cy8yMDA1LzA1L2lkZW50aXR5L2NsYWltcy9uYW1laWRlbnRpZmllciI6IjgzIiwiaHR0cDovL3NjaGVtYXMueG1sc29hcC5vcmcvd3MvMjAwNS8wNS9pZGVudGl0eS9jbGFpbXMvbmFtZSI6IlRvbWFzeiIsImh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vd3MvMjAwOC8wNi9pZGVudGl0eS9jbGFpbXMvcm9sZSI6IlRlYWNoZXIiLCJleHAiOjE3MTU0NDg1MjF9.-PXiWFytSA66gnP1H0ueorexxWxmG12saFp0Od3M2q4'
    url = 'http://localhost:5162/Exercise/AddExercise/'

    headers = {'Authorization': 'Bearer ' + str(token)}
    data = {
        'CourseId': 23,
        'ExerciseName': 'Dodatkowe zadania',
        'DeadLine': '25.06.2024'
    }

    response = requests.post(url, data=data, headers=headers, verify=False)
    print(response.text)
===
[HttpPost]

5. Dodawanie pliku do zadania. Gdy dodano zadanie, ale zapomniało się o pliku
URL: http://localhost:5162/Exercise/{exerciseId}/AddFileToExercise
DATA:  exerciseId w linku + File (IFormFile)  | headers token właściciela kursu
Tutaj podsyłam kod w python jak ja dodałem:
===
def AddFileToExercise():
    token = 'eyJhbGciOiJodHRwOi8vd3d3LnczLm9yZy8yMDAxLzA0L3htbGRzaWctbW9yZSNobWFjLXNoYTI1NiIsInR5cCI6IkpXVCJ9.eyJodHRwOi8vc2NoZW1hcy54bWxzb2FwLm9yZy93cy8yMDA1LzA1L2lkZW50aXR5L2NsYWltcy9uYW1laWRlbnRpZmllciI6IjgyIiwiaHR0cDovL3NjaGVtYXMueG1sc29hcC5vcmcvd3MvMjAwNS8wNS9pZGVudGl0eS9jbGFpbXMvbmFtZSI6Ik1hZ2RhbGVuYSIsImh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vd3MvMjAwOC8wNi9pZGVudGl0eS9jbGFpbXMvcm9sZSI6IlRlYWNoZXIiLCJleHAiOjE3MTU0NDg1NTV9.Lc83ykzFBuFvjS_I1-z4YC2jH24Svz2S2AwtNYBbWqY'
    url = 'http://localhost:5162/Exercise/13/AddFileToExercise'

    headers = {'Authorization': 'Bearer ' + str(token)}

    # Ścieżka do pliku, który chcesz przesłać
    file_path = 'C:/Users/xxx/xxx/xxx/chadge.gif'
    # Wyślij żądanie POST
    response = requests.patch(url, headers=headers, files={'File': open(file_path, 'rb')}, verify=False)
    # response = requests.post(url, data=data, headers=headers, verify=False)
    print(response.text)
===
[HttpPatch]

6. Edycja zadania
URL: http://localhost:5162/Exercise/{exerciseId}/EditExercise
DATA: 
{
  "exerciseName": "string",
  "exerciseDescription": "string",
  "deadLine": "string"
}
+ exerciseId w linku | headers token właściciela kursu
INFO: Każda wartość może być null, ale też możesz nie podawać danej wartośći jeżeli nei jest zmieniana. Powinno zadziałać (przynajmniej w python)
Tutaj podsyłam kod w python jak ja dodałem:
===
def EditExercise():
    token = 'eyJhbGciOiJodHRwOi8vd3d3LnczLm9yZy8yMDAxLzA0L3htbGRzaWctbW9yZSNobWFjLXNoYTI1NiIsInR5cCI6IkpXVCJ9.eyJodHRwOi8vc2NoZW1hcy54bWxzb2FwLm9yZy93cy8yMDA1LzA1L2lkZW50aXR5L2NsYWltcy9uYW1laWRlbnRpZmllciI6IjgyIiwiaHR0cDovL3NjaGVtYXMueG1sc29hcC5vcmcvd3MvMjAwNS8wNS9pZGVudGl0eS9jbGFpbXMvbmFtZSI6Ik1hZ2RhbGVuYSIsImh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vd3MvMjAwOC8wNi9pZGVudGl0eS9jbGFpbXMvcm9sZSI6IlRlYWNoZXIiLCJleHAiOjE3MTU0NDg1NTV9.Lc83ykzFBuFvjS_I1-z4YC2jH24Svz2S2AwtNYBbWqY'
    url = 'http://localhost:5162/Exercise/13/EditExercise'

    headers = {'Authorization': 'Bearer ' + str(token)}

    data = {
        'ExerciseDescription': 'Opis do tego zadania został zmeiniony w python'
    }
    response = requests.patch(url, headers=headers, json=data, verify=False)
    print(response.text)
===
[HttpPatch]

7. Usunięcie zadania
URL: http://localhost:5162/Exercise/DeleteExercised
DATA: {exerciseId}| headers token właściciela kursu
[HttpDelete]

8. Usunięcie pliku z zadania
URL: http://localhost:5162/Exercise/DeleteFile
DATA: {fileId}| headers token właściciela kursu
[HttpDelete]